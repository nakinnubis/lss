17,18d16
< savDir = '/Users/sluo/Dropbox/png/'
< #savDir = '/Users/sluo/Desktop/png/'
41,42c39
<   goObservedData() # read and plot observed data
<   #testSmoothingError()
---
>   test()
44c41
< def testSmoothingError():
---
> def test():
166c163
<   strainT,strainR,strainS = 0.4,0.4,0.3 # 3D warping (best)
---
>   strainT,strainR,strainS = 0.4,0.4,0.3 # 3D warping
274,308d270
< def xgoObservedData():
<   src,rcp,rco = getSourceAndReceiver()
<   do = zerofloat(nt,nr,ns)
<   for isou in range(ns):
<     copy(rco[isou].getData(),do[isou])
<   #do = randfloat(nt,nr,ns)
<   ss = Sampling(ns,0.0125*stride,1.225) # shot (relative offset)
<   sr = Sampling(197,0.00625,-1.225) # receiver
<   st = Sampling(3751,0.0004,0.0) # time
<   pixels3(do,s1=st,s2=sr,s3=ss,cmin=-8.0,cmax=8.0,title='ppp3')
< 
< def goObservedData():
<   rdir = '/Users/sluo/Desktop/subg/nonlinear/vz/ares05/warp1d/'
<   #rdir = '/Users/sluo/Desktop/subg/nonlinear/vz/ares05/warp2d/'
<   #rdir = '/Users/sluo/Desktop/subg/nonlinear/vz/ares05/warp3d/'
<   do = zerofloat(nt,nr,ns); read(rdir+'do.dat',do)
<   dp = zerofloat(nt,nr,ns); read(rdir+'dp.dat',dp)
<   dw = zerofloat(nt,nr,ns); read(rdir+'dw.dat',dw)
<   w = zerofloat(nt,nr,ns); read(rdir+'w.dat',w); mul(1000.0*dt,w,w)
<   ss = Sampling(ns,0.0125*stride,1.225) # shot (relative offset)
<   sr = Sampling(197,0.00625,-1.225) # receiver
<   st = Sampling(3751,0.0004,0.0) # time
<   k1,k2,k3 = nt/2,nr-1,25 # x=1.85 (shown in CWP report)
<   #k1,k2,k3 = nt/2,nr-1,173 # x=5.55 (smallest shifts)
<   pixels3(do,s1=st,s2=sr,s3=ss,cmin=-8.0,cmax=8.0,
<     k1=k1,k2=k2,k3=k3,title='do')
<   pixels3(dp,s1=st,s2=sr,s3=ss,cmin=-8.0,cmax=8.0,
<     k1=k1,k2=k2,k3=k3,title='dp')
<   pixels3(dw,s1=st,s2=sr,s3=ss,cmin=-8.0,cmax=8.0,
<     k1=k1,k2=k2,k3=k3,title='dw')
<   pixels3(w,s1=st,s2=sr,s3=ss,cmap=jet,lineColor=Color.BLACK,
<     k1=k1,k2=k2,k3=k3,cbar='Time shift (ms)',title='w',
<     cmin=-17.5,cmax=17.5)
<     #sperc=100.0)
< 
641c603
<   mul(1.0/max(abs(w)),w,w)
---
>   #mul(1.0/max(abs(w)),w,w)
646,651c608,611
<   sst = Sampling(301,dt,0.0)
<   wc = copy(301,30,w)
<   vc = copy(301,30,v)
<   points(wc,sst,cmin=-1.1,cmax=1.1,label='Time (s)',title='w')
<   points(vc,sst,cmin=-1.1,cmax=1.1,label='Time (s)',title='v')
<   points(wc,sst,x2=vc,cmin=-1.1,cmax=1.1,label='Time (s)',title='wv')
---
>   points(copy(400,w),cmin=-1.0,cmax=1.0)
>   points(copy(400,v),cmin=-1.0,cmax=1.0)
>   #write('/home/sluo/Desktop/wa.dat',w)
>   #write('/home/sluo/Desktop/wb.dat',v)
1207c1167
<   cb = sp.addColorBar()
---
>   cb = sp.addColorBar('Velocity')
1228,1275c1188
< def pixels3(x,s1=None,s2=None,s3=None,cmap=gray,lineColor=Color.YELLOW,
<     perc=100.0,sperc=None,cmin=0.0,cmax=0.0,cbar=None,
<     k1=None,k2=None,k3=None,title=None):
<   if s1 is None: s1 = Sampling(len(x[0][0]))
<   if s2 is None: s2 = Sampling(len(x[0]))
<   if s3 is None: s3 = Sampling(len(x))
<   o = PlotPanelPixels3.Orientation.X1DOWN_X2RIGHT
<   a = PlotPanelPixels3.AxesPlacement.LEFT_BOTTOM
<   panel = PlotPanelPixels3(o,a,s1,s2,s3,x)
<   panel.setColorModel(cmap)
<   panel.setSlices(
<     k1 if k1 else s1.count/2,
<     k2 if k2 else s2.count/2,
<     k3 if k3 else s3.count/2)
<   panel.setLabel1("Time (s)")
<   panel.setLabel2("Offset (km)")
<   panel.setLabel3("Position (km)")
<   panel.setLineColor(lineColor)
<   if cbar:
<     panel.addColorBar(cbar)
<   else:
<     panel.addColorBar()
<   panel.setColorBarWidthMinimum(160)
<   panel.setBackground(Color.WHITE)
<   #panel.setInterval1(0.1)
<   #panel.setInterval2(1.0)
<   #panel.setInterval3(1.0)
<   if cmin<cmax:
<     panel.setClips(cmin,cmax)
<   if perc<100.0:
<     panel.setPercentiles(100.0-perc,perc)
<   if sperc is not None:
<     clip = getSymmetricClip(sperc,x)
<     panel.setClips(-clip,clip)
<   panel.mosaic.setHeightMinimum(0,300)
<   panel.mosaic.setWidthMinimum(0,330)
<   panel.mosaic.setWidthElastic(0,0)
<   panel.mosaic.setHeightElastic(0,0)
<   panel.setVLimits(1,0.3,1.4)
<   frame = PlotFrame(panel)
<   frame.setSize(980,800)
<   #frame.setFontSizeForSlide(1.0,1.0,16.0/9.0)
<   frame.setFontSize(45.0)
<   frame.setVisible(True)
<   if title and savDir:
<     frame.paintToPng(1920,1.0,savDir+title+'.png')
< 
< def points(x,s1=None,x2=None,cmin=0.0,cmax=0.0,label=None,title=None):
---
> def points(x,s1=None,cmin=0.0,cmax=0.0,label=None,title=None):
1278,1284c1191,1194
<   if x2 is not None:
<     pv2 = sp.addPoints(s1,x2) if s1 else sp.addPoints(x2)
<     pv2.setLineWidth(4.0)
<     pv2.setLineColor(Color.RED)
<     #pv2.setLineStyle(PointsView.Line.DASH)
<   pv = sp.addPoints(s1,x) if s1 else sp.addPoints(x)
<   pv.setLineWidth(4.0)
---
>   if s1 is not None:
>     pv = sp.addPoints(s1,x)
>   else:
>     pv = sp.addPoints(x)
1287,1288c1197,1199
<   #sp.setVLimits(0.0,1.1) # XXX
<   #sp.setHLimits(0.0,100.0) # XXX
---
>   pv.setLineWidth(8.0)
>   sp.setVLimits(0.0,1.1) # XXX
>   sp.setHLimits(0.0,100.0) # XXX
1292c1203
<   sp.setSize(800,805)
---
>   sp.setSize(1000,805)
